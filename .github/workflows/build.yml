name: Build s

on: [push]

env:
  SERVER_APPLICATION_NAME: lunremote
  APPLICATION_VERSION: 0.7.0

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: "Windows Latest x64", artifact: "Windows-x64.zip",
            os: windows-latest,
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Linux Latest x64", artifact: "Linux-x64.zip",
            os: ubuntu-latest
          }
        - {
            name: "macOS Latest x64", artifact: "macOS-x64.zip",
            os: macos-latest
          }

    steps:

    - name: Checkout client
      uses: actions/checkout@v2
      with:
        path: server
        repository: MarekMaslanka/remocy-server
#         ref: build
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Installing system libs
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Linux")
          execute_process(
            COMMAND sudo apt install tree libxfixes-dev
          )
        endif()

    - name: Configure
      shell: cmake -P {0}
      run: |
        set(CMAKE_VERBOSE_MAKEFILE ON)
        execute_process(
          COMMAND ls -l
        )

        foreach(app server)
          execute_process(
            COMMAND cmake .
            WORKING_DIRECTORY "${app}"
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status for cmake")
          endif()
        endforeach()

    - name: Build
      shell: cmake -P {0}
      run: |
        set(CMAKE_VERBOSE_MAKEFILE ON)
        include(ProcessorCount)
        ProcessorCount(N)
        set(make_program make -j ${N})
        foreach(app server)
          execute_process(
            COMMAND ${make_program}
            RESULT_VARIABLE result
            WORKING_DIRECTORY "${app}"
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status for make")
          endif()
          file(MAKE_DIRECTORY "${app}/deploy")
        endforeach()

        file(MAKE_DIRECTORY "server/deploy/$ENV{SERVER_APPLICATION_NAME}")
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/$ENV{SERVER_APPLICATION_NAME}-$ENV{APPLICATION_VERSION}-${{ matrix.config.artifact }}" server_artifact)
        
        if ("${{ runner.os }}" STREQUAL "Windows")
          file(COPY "tray/release/${{ steps.qt_creator.outputs.qtc_binary_tray_name }}" DESTINATION "tray/deploy/$ENV{SUPERVISOR_APPLICATION_NAME}/")
          
          file(COPY "client/lib/openh264.dll" DESTINATION "client/deploy/$ENV{CLIENT_APPLICATION_NAME}/")
          file(COPY "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.26.28801/bin/Hostx64/x64/msvcp140.dll" DESTINATION "tray/deploy/$ENV{SUPERVISOR_APPLICATION_NAME}/")
          file(COPY "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.26.28801/bin/Hostx64/x64/vcruntime140.dll" DESTINATION "tray/deploy/$ENV{SUPERVISOR_APPLICATION_NAME}/")
          file(COPY "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.26.28801/bin/Hostx64/x64/vcruntime140_1.dll" DESTINATION "tray/deploy/$ENV{SUPERVISOR_APPLICATION_NAME}/")
          file(COPY "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.26.28801/bin/Hostx64/x64/msvcp140.dll" DESTINATION "client/deploy/$ENV{CLIENT_APPLICATION_NAME}/")
          file(COPY "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.26.28801/bin/Hostx64/x64/vcruntime140.dll" DESTINATION "client/deploy/$ENV{CLIENT_APPLICATION_NAME}/")
          file(COPY "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.26.28801/bin/Hostx64/x64/vcruntime140_1.dll" DESTINATION "client/deploy/$ENV{CLIENT_APPLICATION_NAME}/")
          execute_process(
            COMMAND dir
          )
          execute_process(
            COMMAND dir "client/deploy/$ENV{SUPERVISOR_APPLICATION_NAME}/"
          )
          execute_process(
            COMMAND dir "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.26.28801/bin/Hostx64/x64/"
          )
          execute_process(
            COMMAND windeployqt "tray/deploy/$ENV{SUPERVISOR_APPLICATION_NAME}/${{ steps.qt_creator.outputs.qtc_binary_tray_name }}"
            WORKING_DIRECTORY "qt5/$ENV{QT_VERSION}/bin/"
          )
          execute_process(
            COMMAND windeployqt "client/deploy/$ENV{CLIENT_APPLICATION_NAME}/${{ steps.qt_creator.outputs.qtc_binary_client_name }}"
            WORKING_DIRECTORY "qt5/$ENV{QT_VERSION}/bin/"
          )
          execute_process(COMMAND
            ${CMAKE_COMMAND} -E tar cvf ${supervisor_artifact} --format=zip "$ENV{SUPERVISOR_APPLICATION_NAME}"
            WORKING_DIRECTORY "tray/deploy/"
          )
          execute_process(COMMAND
            ${CMAKE_COMMAND} -E tar cvf ${client_artifact} --format=zip "$ENV{CLIENT_APPLICATION_NAME}"
            WORKING_DIRECTORY "client/deploy/"
          )
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          file(COPY "client/lib/libopenh264.5.dylib" DESTINATION "/usr/local/lib/")
          execute_process(
            COMMAND ls -l
          )
          execute_process(
            COMMAND "qt5/$ENV{QT_VERSION}/clang_64/bin/macdeployqt" "tray/${{ steps.qt_creator.outputs.qtc_binary_tray_name }}"
            #WORKING_DIRECTORY "qt5/$ENV{QT_VERSION}/clang_64/bin/"
          )
          execute_process(
            COMMAND "qt5/$ENV{QT_VERSION}/clang_64/bin/macdeployqt" "client/${{ steps.qt_creator.outputs.qtc_binary_client_name }}" -verbose=2
            #WORKING_DIRECTORY "qt5/$ENV{QT_VERSION}/clang_64/bin/"
          )
          execute_process(
            COMMAND ls -l
            WORKING_DIRECTORY "tray/${{ steps.qt_creator.outputs.qtc_binary_tray_name }}"
          )
          execute_process(
            COMMAND ls -l
            WORKING_DIRECTORY "client/${{ steps.qt_creator.outputs.qtc_binary_client_name }}"
          )
          execute_process(COMMAND
            ${CMAKE_COMMAND} -E tar cvf ${supervisor_artifact} --format=zip "tray/${{ steps.qt_creator.outputs.qtc_binary_tray_name }}"
          )
          execute_process(COMMAND
            ${CMAKE_COMMAND} -E tar cvf ${client_artifact} --format=zip "client/${{ steps.qt_creator.outputs.qtc_binary_client_name }}"
          )
        else()
          file(COPY "tray/${{ steps.qt_creator.outputs.qtc_binary_tray_name }}" DESTINATION "tray/deploy/$ENV{SUPERVISOR_APPLICATION_NAME}/")
          file(COPY "client/${{ steps.qt_creator.outputs.qtc_binary_client_name }}" DESTINATION "client/deploy/$ENV{CLIENT_APPLICATION_NAME}/")
          
          file(COPY "client/lib/libopenh264.so" DESTINATION "qt5/$ENV{QT_VERSION}/gcc_64/lib/")
          file(COPY "client/lib/libopenh264.so.5" DESTINATION "qt5/$ENV{QT_VERSION}/gcc_64/lib/")
          
          file(DOWNLOAD "https://github.com/MarekMaslanka/linuxdeployqt/releases/download/1.0/linuxdeployqt" "linuxdeployqt")
          
          execute_process(
            COMMAND chmod a+x linuxdeployqt
          )
          execute_process(
            COMMAND ../../../../linuxdeployqt ../../../../client/deploy/$ENV{CLIENT_APPLICATION_NAME}/${{ steps.qt_creator.outputs.qtc_binary_client_name }} -verbose=2
            WORKING_DIRECTORY "qt5/$ENV{QT_VERSION}/gcc_64/lib/"
          )
          execute_process(	
            COMMAND ../../../../linuxdeployqt ../../../../tray/deploy/$ENV{SUPERVISOR_APPLICATION_NAME}/${{ steps.qt_creator.outputs.qtc_binary_tray_name }} -verbose=2
            WORKING_DIRECTORY "qt5/$ENV{QT_VERSION}/gcc_64/lib/"
          )
          execute_process(COMMAND
            ${CMAKE_COMMAND} -E tar cvf ${supervisor_artifact} --format=zip "$ENV{SUPERVISOR_APPLICATION_NAME}"
            WORKING_DIRECTORY "tray/deploy/"
          )
          execute_process(COMMAND
            ${CMAKE_COMMAND} -E tar cvf ${client_artifact} --format=zip "$ENV{CLIENT_APPLICATION_NAME}"
            WORKING_DIRECTORY "client/deploy/"
          )
        endif()

    - uses: actions/upload-artifact@v1
      id: upload_server_artifact
      with:
        path: ./${{ env.SUPERVISOR_APPLICATION_NAME }}-${{ env.APPLICATION_VERSION }}-${{ matrix.config.artifact }}
        name: ${{ env.SUPERVISOR_APPLICATION_NAME }}-${{ env.APPLICATION_VERSION }}-${{ matrix.config.artifact }}
    
    - uses: actions/upload-artifact@v1
      id: upload_client_artifact
      with:
        path: ./${{ env.CLIENT_APPLICATION_NAME }}-${{ env.APPLICATION_VERSION }}-${{ matrix.config.artifact }}
        name: ${{ env.CLIENT_APPLICATION_NAME }}-${{ env.APPLICATION_VERSION }}-${{ matrix.config.artifact }}

  deploy:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
        - {
            name: "Windows Latest x64", artifact: "Windows-x64.zip",
            os: windows-latest
          }
        - {
            name: "Linux Latest x64", artifact: "Linux-x64.zip",
            os: ubuntu-latest
          }
        - {
            name: "macOS Latest x64", artifact: "macOS-x64.zip",
            os: macos-latest
          }
    needs: build

    steps:
    - name: Download server artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.SUPERVISOR_APPLICATION_NAME }}-${{ env.APPLICATION_VERSION }}-${{ matrix.config.artifact }}
        path: ./

    - name: Download client artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.CLIENT_APPLICATION_NAME }}-${{ env.APPLICATION_VERSION }}-${{ matrix.config.artifact }}
        path: ./

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Deploy server
      id: server_upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.SUPERVISOR_APPLICATION_NAME }}-${{ env.APPLICATION_VERSION }}-${{ matrix.config.artifact }}
        asset_name: ${{ env.SUPERVISOR_APPLICATION_NAME }}-${{ env.APPLICATION_VERSION }}-${{ matrix.config.artifact }}
        asset_content_type: application/zip

    - name: Deploy client
      id: client_upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.CLIENT_APPLICATION_NAME }}-${{ env.APPLICATION_VERSION }}-${{ matrix.config.artifact }}
        asset_name: ${{ env.CLIENT_APPLICATION_NAME }}-${{ env.APPLICATION_VERSION }}-${{ matrix.config.artifact }}
        asset_content_type: application/zip
