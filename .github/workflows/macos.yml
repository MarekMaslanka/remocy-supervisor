name: macOS
on:
  push:
  schedule:
    - cron: "0 0 1 * *"

env:
  QT_VERSION: 5.15.2
  APPLICATION_NAME: lunremote
  CLIENT_APPLICATION_NAME: lunremote
  SERVER_APPLICATION_NAME: lunremoted
  APPLICATION_VERSION: v0.0.1-dev
  APPLICATION_SHORT_VERSION: 0.0.0
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  build:
    name: Build
    runs-on: macos-latest
    steps:

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ env.QT_VERSION }}

      - name: Checkout client
        uses: actions/checkout@v2
        with:
          path: client
          repository: MarekMaslanka/remocy-client
          ref: fix_display_non-windows 
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Checkout server
        uses: actions/checkout@v2
        with:
          path: server
          repository: MarekMaslanka/remocy-server
  #        ref: build
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Get Time
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 1
          format: 'YYYYMMDDHHmm'

      - name: Prepare version variables
        shell: cmake -P {0}
        run: |
          if($ENV{GITHUB_REF} MATCHES "refs/tags/.*")
            STRING(REPLACE "refs/tags/" "" APP_VER $ENV{GITHUB_REF})
            STRING(REGEX REPLACE "^.*v?([0-9]+).([0-9]+).([0-9]+)(-([A-Za-z0-9_]+))?$" "\\1.\\2.\\3" SHORT_VER $ENV{GITHUB_REF})
            message("::set-env name=APPLICATION_VERSION::${APP_VER}")
            message("::set-env name=APPLICATION_SHORT_VERSION::${SHORT_VER}")
          else()
            STRING(REGEX REPLACE "^v?([0-9]+).([0-9]+).([0-9]+)(-([A-Za-z0-9_]+))?$" "\\1.\\2.\\3" SHORT_VER $ENV{APPLICATION_VERSION})
            message("::set-env name=APPLICATION_SHORT_VERSION::${SHORT_VER}")
          endif()

      - name: Build client
        run: |
          cd client
          qmake CONFIG+=release DEFINES+=VERSION="${{ env.APPLICATION_VERSION }}" DEFINES+=BUILD_ID="${{ steps.time.outputs.time }}"
          make -j$(nproc)

      - name: Deploy client
        run: |
          mkdir artifact/
          ls -l client
          sudo cp client/lib/libopenh264.5.dylib /usr/local/lib/
          macdeployqt client/${{ env.CLIENT_APPLICATION_NAME }}.app -verbose=2
          sed -i'' -e 's/v0.0.0/${{ env.APPLICATION_VERSION }}/' client/resources/Info.plist
          mv client/resources/Info.plist client/${{ env.CLIENT_APPLICATION_NAME }}.app/Contents/

      - name: Build server
        run: |
          cd server
          sed -i'' -e 's/#define VERSION 0.0.1/#define VERSION ${{ env.APPLICATION_VERSION }}/' src/main.cpp
          sed -i'' -e 's/#define BUILD_ID 0/#define BUILD_ID ${{ steps.time.outputs.time }}/' src/main.cpp
          xcodebuild -project "lunremoted.xcodeproj" -configuration Release build CODE_SIGNING_ALLOWED=NO

      - name: Deploy server
        run: |
          mv server/build/Release/${{ env.SERVER_APPLICATION_NAME }} client/${{ env.CLIENT_APPLICATION_NAME }}.app/Contents/MacOS/
          mv server/build/Release/crashpad_handler client/${{ env.CLIENT_APPLICATION_NAME }}.app/Contents/MacOS/

      - name: 'Compress artifact'
        run: tar -C client/ -cf artifact.tar ${{ env.CLIENT_APPLICATION_NAME }}.app

      - uses: actions/upload-artifact@v2
        with:
          path: ./server/build/Release/lunremoted.dSYM
          name: lunremoted-${{ env.APPLICATION_VERSION }}.dSYM
    
      - uses: actions/upload-artifact@v2
        id: upload_product_artifact
        with:
          path: ./artifact.tar
          name: artifact-macos.tar

  installer:
    name: Make installer
    runs-on: macos-latest
    needs: build
    steps:

    - name: Prepare version variables
      shell: cmake -P {0}
      run: |
        if($ENV{GITHUB_REF} MATCHES "refs/tags/.*")
          STRING(REPLACE "refs/tags/" "" APP_VER $ENV{GITHUB_REF})
          STRING(REGEX REPLACE "^.*v?([0-9]+).([0-9]+).([0-9]+)(-([A-Za-z0-9_]+))?$" "\\1.\\2.\\3" SHORT_VER $ENV{GITHUB_REF})
          message("::set-env name=APPLICATION_VERSION::${APP_VER}")
          message("::set-env name=APPLICATION_SHORT_VERSION::${SHORT_VER}")
        else()
          STRING(REGEX REPLACE "^v?([0-9]+).([0-9]+).([0-9]+)(-([A-Za-z0-9_]+))?$" "\\1.\\2.\\3" SHORT_VER $ENV{APPLICATION_VERSION})
          message("::set-env name=APPLICATION_SHORT_VERSION::${SHORT_VER}")
        endif()

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: artifact-macos.tar

    - name: Extract artifact
      run: tar -xvf artifact.tar

    - name: Checkout installer
      uses: actions/checkout@v2
      with:
        path: installer
        repository: MarekMaslanka/remocy-installer
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Install dependencies
      run: |
        npm install --global create-dmg
        brew install graphicsmagick imagemagick

    - name: Build DMG package
      run: |
        sudo cp -f installer/macos/dmg-background.png /usr/local/lib/node_modules/create-dmg/assets/
        sudo cp -f installer/macos/dmg-background@2x.png /usr/local/lib/node_modules/create-dmg/assets/
        create-dmg lunremote.app || true
        mv "lunremote ${{ env.APPLICATION_VERSION }}.dmg" lunremote-${{ env.APPLICATION_VERSION }}.dmg

    - uses: actions/upload-artifact@v1
      with:
        path: ./lunremote-${{ env.APPLICATION_VERSION }}.dmg
        name: lunremote-${{ env.APPLICATION_VERSION }}.dmg

  deploy:
    name: "Deploy application"
    if: contains(github.ref, 'tags/')
    runs-on: ubuntu-latest
    needs: installer
    steps:

    - name: Prepare version variables
      shell: cmake -P {0}
      run: |
        if($ENV{GITHUB_REF} MATCHES "refs/tags/.*")
          STRING(REPLACE "refs/tags/" "" APP_VER $ENV{GITHUB_REF})
          STRING(REGEX REPLACE "^.*v?([0-9]+).([0-9]+).([0-9]+)(-([A-Za-z0-9_]+))?$" "\\1.\\2.\\3" SHORT_VER $ENV{GITHUB_REF})
          message("::set-env name=APPLICATION_VERSION::${APP_VER}")
          message("::set-env name=APPLICATION_SHORT_VERSION::${SHORT_VER}")
        else()
          STRING(REGEX REPLACE "^v?([0-9]+).([0-9]+).([0-9]+)(-([A-Za-z0-9_]+))?$" "\\1.\\2.\\3" SHORT_VER $ENV{APPLICATION_VERSION})
          message("::set-env name=APPLICATION_SHORT_VERSION::${SHORT_VER}")
        endif()

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Deploy macOS application
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.APPLICATION_NAME }}-${{ env.APPLICATION_VERSION }}.dmg/${{ env.APPLICATION_NAME }}-${{ env.APPLICATION_VERSION }}.dmg
        asset_name: ${{ env.APPLICATION_NAME }}-${{ env.APPLICATION_VERSION }}.dmg
        asset_content_type: application/octet-stream
